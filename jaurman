#!/bin/env python3 
'''
 ----------------------------------------------------------------------------
 "THE BEER-WARE LICENSE" (Revision 42):
 <phk@FreeBSD.ORG> wrote this file.  As long as you retain this notice you
 can do whatever you want with this stuff. If we meet some day, and you think
 this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
 ----------------------------------------------------------------------------
'''

import sys

from distutils.version import LooseVersion
from json import loads
from urllib.request import urlopen
from shutil import copyfile
import os
import subprocess
import fnmatch
import argparse



VERSION   = '2.0.1'
out       = None
AUR       ='https://AUR.archlinux.org/rpc/?v=5&'
NEW_FMT   = '\033[34m:: \033[0;1m{Name} \033[0;31m{Old}\033[0m -> \033[32m{New}\033[0m'
OLD_FMT   = '\033[34m:: \033[0;1m{Name} \033[0m{Old} != {New}'
aur_url   = "https://aur.archlinux.org/"
build_dir = "/home/justin/Documents/Build/"
repo_dir  = "/home/justin/custom-repo/"
repo      = "/home/justin/custom-repo/custom.db.tar.gz"

flags = [
    ["-D", "--downloadAndBuild", 
        "download and build specified packages"],
    ["-U", "--update",
        "check for available updates"],
    ["-v", "--version",
        "Display version and exit"]
]

ret = os.popen("ls /home/justin/custom-repo/ | grep .pkg.tar.xz").read().rstrip().split('\n')

PKGS = []
VERS = {}

def version(version=VERSION):
 print('''
   /\/\\    
  / /  \\    /\\        Jaurman v'''+version+'''
 / / /\ \\  /  \\  /\\   ''', end = '')
 print('''
 \ \/ / /  \\  /  \\/   Copyright (c) 2018-2019 Justin Benge
  \  / /    \\/    
   \/\/               This program may be freely redistributed under
		      the terms of the Beerware licence.
    ''')

def print_help(param="HERE :D"):
    print("usage: jaurman <operation> [...]")
    print("operations:")
    print("jaurman {-h --help}")    
    print("jaurman {-v --version}")
    print("jaurman {-c --checkUpdates}")
    print("jaurman -D <package>  --Download, build, and store package in custom repo")
    
	  


def initialize_pkgs():
    for i in range(len(ret)):
        ret[i] = ret[i].rstrip('-0x86_64.pkg.tar.xz')
        ret[i] = ret[i].split('-', 1)
        PKGS.append(ret[i][0])
        VERS[ret[i][0]] = ret[i][1]

def get_pkg_info():
    params = '&arg]=' + '&arg[]='.join(PKGS)
    with urlopen(AUR + 'type=info' + params) as url:
        info  = loads(url.read().decode())['results']
    return info

def check_updates():
    info = get_pkg_info()
    for pkg in info:
       params = {'Name': pkg['Name'], 'Old': VERS[pkg['Name']], 'New': pkg['Version']}
       available = LooseVersion(pkg['Version'])
       installed = LooseVersion(VERS[pkg['Name']])
       if installed < available:
          print(NEW_FMT.format(**params))
       elif installed != available:
          print(OLD_FMT.format(**params))

def check():
    initialize_pkgs()
    check_updates()


def download(pkg):
    os.chdir(build_dir)
    subprocess.run(['git', 'clone', aur_url + pkg + '.git'], stdout=out, stderr=out)

def build(pkg):
    os.chdir(build_dir + pkg)
    os.system("vim PKGBUILD")
    subprocess.run(["makepkg", "-s"], stdout=out, stderr=out)

def add_to_repo(pkg):
    os.chdir(build_dir + pkg)
    for file_name in os.listdir('.'):
        if fnmatch.fnmatch(file_name, '*.pkg.tar.xz'):
            os.popen("cp " + file_name + " " + repo_dir)
            subprocess.run(["cp", file_name , repo_dir], stdout=out, stderr=out)
            subprocess.run(["repo-add", repo, repo_dir+file_name], stdout=out, stderr=out)
            break


def full_download(pkg):
    download(pkg)
    build(pkg)
    add_to_repo(pkg)
"""
if __name__ == '__main__':
    ## Note, subtract 1 from number of arguments given on cli
    if len(sys.argv) == 2:
        if(sys.argv[1] == '-v'):
            version()
        if(sys.argv[1] == '-c'):
            check()
    elif len(sys.argv) != 3:
        print_help()
    elif sys.argv[1][0] != '-':
        print_help()
    else:
        arguments = sys.argv[1].lstrip('-')
        pkg       = sys.argv[2]
        if arguments[0] == 'd':
            arguments.lstrip('d')
            download(pkg)
        if arguments[0] == 'b':
            arguments.lstrip('b')
            build(pkg)
        if arguments[0] == 'a':
            arguments.lstrip('a')
            add_to_repo(pkg)
        if arguments[0] == 'D':
            download(pkg)
            build(pkg)
            add_to_repo(pkg)
            exit(0)
"""

parser = argparse.ArgumentParser()
for f in flags:
   parser.add_argument(f[0], f[1], action='count', help=f[2])
parser.add_argument('pkg', nargs='*', help='package names or search terms')
args = parser.parse_args(sys.argv[1:])
args.data = None

if args.version:
    version()
if args.downloadAndBuild:
    full_download(args)
elif args.update:
    check(args)
